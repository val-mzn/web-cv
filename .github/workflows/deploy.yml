name: Deploy to OVH

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linting
        run: npm run lint
      
      - name: Build application
        run: npm run build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/
      
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/web-cv:latest
            ghcr.io/${{ github.repository_owner }}/web-cv:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Deploy to OVH Server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.OVH_HOST }}
          username: ${{ secrets.OVH_USERNAME }}
          key: ${{ secrets.OVH_SSH_KEY }}
          port: ${{ secrets.OVH_PORT }}
          script: |
            cd ~/web-cv
            
            # Créer le fichier .env avec les variables nécessaires
            cat > .env << EOF
            GITHUB_REPOSITORY_OWNER=${{ github.repository_owner }}
            GITHUB_USERNAME=${{ github.repository_owner }}
            DOCKER_USERNAME=${{ github.repository_owner }}
            GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
            DOMAIN=${{ secrets.DOMAIN }}
            ACME_EMAIL=${{ secrets.ACME_EMAIL }}
            TRAEFIK_AUTH=${{ secrets.TRAEFIK_AUTH }}
            NODE_ENV=production
            EOF
            
            # Authentification Docker avec GitHub Container Registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.repository_owner }}" --password-stdin
            
            # Déploiement
            export $(cat .env | xargs)
            docker-compose pull
            docker-compose down
            docker-compose up -d
            docker system prune -f
            
            # Nettoyage des credentials
            docker logout ghcr.io